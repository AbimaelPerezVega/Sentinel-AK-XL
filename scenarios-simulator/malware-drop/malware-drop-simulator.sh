#!/bin/bash
# ==============================================================================
# Malware Drop Simulator
# Creates clean and malicious (EICAR) files in a directory monitored by Wazuh FIM
# to test File Integrity Monitoring and VirusTotal integration.
# ==============================================================================

# === First-time setup commands (inside container) ===
# Copy the script to the Wazuh Manager:
#   docker cp ./scenarios-simulator/malware-drop/malware-drop-simulator.sh \
#     sentinel-wazuh-manager:/usr/local/bin/malware-drop-simulator.sh
#
# Make it executable:
#   docker exec -it sentinel-wazuh-manager chmod +x /usr/local/bin/malware-drop-simulator.sh
#
# Run the simulation (arguments: [number_of_files] [malicious_ratio]):
#   docker exec -it sentinel-wazuh-manager /usr/local/bin/malware-drop-simulator.sh 10 3
#
# Clean up generated files:
#   docker exec -it sentinel-wazuh-manager rm -f /var/ossec/data/fimtest/*
# ==============================================================================

set -euo pipefail

# --- Output control (shared contract) ---
BANNER=true
QUIET=false
STEALTH=false
# If called by the Training Manager, hide banner by default
if [ "${SIM_PARENT:-0}" = "1" ]; then BANNER=false; fi
# Pre-parse minimal flags
for __arg in "$@"; do
  case "$__arg" in
    --no-banner) BANNER=false ;;
    -q|--quiet)  QUIET=true ;;
    --stealth)   STEALTH=true; QUIET=true ;;
  esac
done

# --- Configuration ---
# Directory monitored by Wazuh FIM (Syscheck)
TARGET_DIR="/var/ossec/data/fimtest"

# Simulation log
SIM_LOG="/var/log/malware-drop-simulation.log"

# --- Output colors ---
BLUE='\033[0;34m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; NC='\033[0m'
info(){    $QUIET || $STEALTH || echo -e "${BLUE}[INFO]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }
ok(){      echo -e "${GREEN}[OK]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }
warn(){    $QUIET && return 0 || echo -e "${YELLOW}[WARN]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }
malicious(){ $STEALTH && return 0 || echo -e "${RED}[MALICIOUS]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }

# --- Filename and content lists ---
EICAR_STRING='X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'

CLEAN_FILENAMES=(
    "report-final.docx" "data_analysis.xlsx" "presentation_v2.pptx"
    "meeting_notes.txt" "archive.zip" "project_plan.pdf" "config.json"
    "user_list.csv" "backup.sql" "app.log"
)

MALICIOUS_FILENAMES=(
    "Free-Games-Installer.exe" "Urgent-Invoice.pdf.js" "flashplayer_update.exe"
    "cracked_software.zip" "Bitcoin-Generator.exe" "document.scr"
    "java_update.jar" "Video-Player.msi" "system_patch.bat"
)

CLEAN_CONTENT=(
    "This is a standard corporate document."
    "User data export from Q3."
    "Confidential project details."
    "System configuration file, do not delete."
)

# --- Functions ---

# Pick a random element from an array
pick(){
    local -n arr=$1
    echo "${arr[RANDOM % ${#arr[@]}]}"
}

# Create a clean (harmless) file
create_clean_file() {
    local filename
    filename=$(pick CLEAN_FILENAMES)
    local content
    content=$(pick CLEAN_CONTENT)
    local filepath="$TARGET_DIR/$filename"

    echo "$content - $(date)" > "$filepath"
    info "Created clean file: $filepath"
}

# Create a malicious file (EICAR)
create_malicious_file() {
    local filename
    filename=$(pick MALICIOUS_FILENAMES)
    local filepath="$TARGET_DIR/$filename"

    echo "$EICAR_STRING" > "$filepath"
    malicious "Created MALICIOUS file: $filepath"
}

# --- Main logic ---
main() {
    local num_files=${1:-10}       # Number of files to create (default: 10)
    local malicious_ratio=${2:-3}  # Malicious ratio, 1 in every N files (default: 3)

    if ! $STEALTH; then
      info "Starting Malware Drop Simulation..."
      info "Target directory: $TARGET_DIR"
      info "Total files to create: $num_files"
      info "Malicious file ratio: 1 in every $malicious_ratio"
    fi

    # Ensure target directory exists
    if [ ! -d "$TARGET_DIR" ]; then
        warn "Target directory $TARGET_DIR does not exist. Attempting to create it."
        mkdir -p "$TARGET_DIR" || { echo "Failed to create directory. Aborting."; exit 1; }
        # Ensure correct permissions so Wazuh can read it
        chown wazuh:wazuh "$TARGET_DIR"
    fi

    for (( i=1; i<=num_files; i++ )); do
        # Decide whether to create a malicious or clean file
        if (( RANDOM % malicious_ratio == 0 )); then
            create_malicious_file
        else
            create_clean_file
        fi
        # Short pause to simulate realistic activity
        sleep "$(shuf -i 1-3 -n 1)"
    done

    ok "Malware Drop Simulation finished. Check Wazuh FIM and VirusTotal alerts."
    warn "To clean up, run: rm -f $TARGET_DIR/*"
}

# Run main function
main "$@"
