#!/bin/bash
# ==============================================================================
# Malware Drop Simulator
# Creates clean and malicious (EICAR) files in a directory monitored by Wazuh FIM
# to test File Integrity Monitoring and VirusTotal integration.
# ==============================================================================

set -euo pipefail

# --- Configuración ---
# Directorio monitoreado por Wazuh FIM (Syscheck)
TARGET_DIR="/var/ossec/data/fimtest"

# Log de simulación
SIM_LOG="/var/log/malware-drop-simulation.log"

# --- Colores para la salida ---
BLUE='\033[0;34m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; RED='\033[0;31m'; NC='\033[0m'
info(){ echo -e "${BLUE}[INFO]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }
ok(){ echo -e "${GREEN}[OK]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }
warn(){ echo -e "${YELLOW}[WARN]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }
malicious(){ echo -e "${RED}[MALICIOUS]${NC} $(date '+%F %T') - $1" | tee -a "$SIM_LOG"; }

# --- Listas de nombres y contenidos ---
EICAR_STRING='X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'

CLEAN_FILENAMES=(
    "report-final.docx" "data_analysis.xlsx" "presentation_v2.pptx"
    "meeting_notes.txt" "archive.zip" "project_plan.pdf" "config.json"
    "user_list.csv" "backup.sql" "app.log"
)

MALICIOUS_FILENAMES=(
    "Free-Games-Installer.exe" "Urgent-Invoice.pdf.js" "flashplayer_update.exe"
    "cracked_software.zip" "Bitcoin-Generator.exe" "document.scr"
    "java_update.jar" "Video-Player.msi" "system_patch.bat"
)

CLEAN_CONTENT=(
    "This is a standard corporate document."
    "User data export from Q3."
    "Confidential project details."
    "System configuration file, do not delete."
)

# --- Funciones ---

# Función para obtener un elemento aleatorio de un array
pick(){
    local -n arr=$1
    echo "${arr[RANDOM % ${#arr[@]}]}"
}

# Función para crear un archivo inofensivo
create_clean_file() {
    local filename=$(pick CLEAN_FILENAMES)
    local content=$(pick CLEAN_CONTENT)
    local filepath="$TARGET_DIR/$filename"

    echo "$content - $(date)" > "$filepath"
    info "Created clean file: $filepath"
}

# Función para crear un archivo malicioso (EICAR)
create_malicious_file() {
    local filename=$(pick MALICIOUS_FILENAMES)
    local filepath="$TARGET_DIR/$filename"

    echo "$EICAR_STRING" > "$filepath"
    malicious "Created MALICIOUS file: $filepath"
}

# --- Lógica principal ---
main() {
    local num_files=${1:-10} # Número de archivos a crear (default: 10)
    local malicious_ratio=${2:-3} # Ratio de archivos maliciosos, 1 de cada N (default: 3)

    info "Starting Malware Drop Simulation..."
    info "Target directory: $TARGET_DIR"
    info "Total files to create: $num_files"
    info "Malicious file ratio: 1 in every $malicious_ratio"

    # Verificar si el directorio de destino existe
    if [ ! -d "$TARGET_DIR" ]; then
        warn "Target directory $TARGET_DIR does not exist. Attempting to create it."
        mkdir -p "$TARGET_DIR" || { echo "Failed to create directory. Aborting."; exit 1; }
        # Asegurar permisos correctos para que Wazuh pueda leerlo
        chown wazuh:wazuh "$TARGET_DIR"
    fi

    for (( i=1; i<=num_files; i++ )); do
        # Decidir si crear un archivo malicioso o limpio
        if (( RANDOM % malicious_ratio == 0 )); then
            create_malicious_file
        else
            create_clean_file
        fi
        # Pequeña pausa para simular actividad real
        sleep $(shuf -i 1-3 -n 1)
    done

    ok "Malware Drop Simulation finished. Check Wazuh FIM and VirusTotal alerts."
    warn "To clean up, run: rm -f $TARGET_DIR/*"
}

# Ejecutar la función principal
main "$@"
